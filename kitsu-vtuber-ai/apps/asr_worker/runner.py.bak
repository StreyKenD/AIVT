from __future__ import annotations

import asyncio

from .audio import acquire_audio_source
from .config import ASRConfig
from .logger import logger
from .metrics import ASRTelemetry, create_telemetry
from .orchestrator import OrchestratorClient
from .pipeline import SpeechPipeline
from .transcription import build_transcriber
from .vad import PassthroughVAD, build_vad


def _cancel_requested() -> bool:
    """Return True when the current task is under cancellation."""
    try:
        task = asyncio.current_task()
    except RuntimeError:
        return True
    return task is None or task.cancelled()


async def run_worker(config: ASRConfig) -> None:
    orchestrator = OrchestratorClient(config.orchestrator_url)
    backoff_seconds = 1.0
    telemetry = create_telemetry()

    try:
        transcriber = build_transcriber(config)
    except Exception as exc:  # pragma: no cover - startup guard
        logger.exception("ASR worker failed to initialise transcriber: %s", exc)
        await orchestrator.aclose()
        raise

    attempt = 0
    try:
        while True:
            attempt += 1
            current_backoff = backoff_seconds

            try:
                vad = build_vad(config)
            except Exception as exc:
                logger.exception("ASR worker cannot initialise VAD (%s)", exc)
                logger.warning(
                    "Falling back to passthrough VAD. Set ASR_VAD=none to disable VAD explicitly."
                )
                vad = PassthroughVAD(config.frame_bytes)

            pipeline = SpeechPipeline(
                config=config,
                vad=vad,
                transcriber=transcriber,
                orchestrator=orchestrator,
                telemetry=telemetry,
            )
            logger.debug(
                "ASR VAD ready mode=%s class=%s silence_frames=%s",
                config.vad_mode,
                vad.__class__.__name__,
                config.silence_threshold_frames,
            )

            if attempt == 1:
                logger.info(
                    (
                        "Starting ASR worker with model=%s, sample_rate=%s Hz, "
                        "frame=%sms, partial_interval=%sms, vad=%s, device=%s"
                    ),
                    config.model_name,
                    config.sample_rate,
                    config.frame_duration_ms,
                    config.partial_interval_ms,
                    config.vad_mode,
                    config.device_preference,
                )
            else:
                logger.warning(
                    "ASR worker restarting audio capture (attempt %d, backoff %.1fs)",
                    attempt,
                    current_backoff,
                )
            await telemetry.cycle_started(attempt, current_backoff)

            try:
                async with acquire_audio_source(config) as audio_source:
                    await pipeline.process(audio_source.frames())
                logger.warning("Audio frame stream stopped; will restart")
                await telemetry.cycle_completed(attempt, "stream_end")
            except asyncio.CancelledError as exc:
                if _cancel_requested():  # pragma: no cover - shutdown flow
                    raise
                logger.warning(
                    "ASR worker capture loop cancelled unexpectedly on attempt %d; will retry",
                    attempt,
                    exc_info=True,
                )
                await telemetry.cycle_completed(attempt, "cancelled")
            except Exception as exc:  # pragma: no cover - runtime guard
                logger.exception("ASR worker capture loop failed: %s", exc)
                await telemetry.cycle_completed(
                    attempt, "error", detail=type(exc).__name__
                )

            await asyncio.sleep(current_backoff)
            backoff_seconds = min(current_backoff * 2, 30.0)
    finally:
        await orchestrator.aclose()
        await telemetry.aclose()


__all__ = ["run_worker"]
